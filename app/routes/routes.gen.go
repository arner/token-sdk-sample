// Package routes provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package routes

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Account Information about an account and its balance
type Account struct {
	// Balance balance in base units for each currency
	Balance []Amount `json:"balance"`

	// Id account id as registered at the Certificate Authority
	Id string `json:"id"`
}

// Amount The amount to issue, transfer or redeem.
type Amount struct {
	// Code the code of the token
	Code string `json:"code"`

	// Value value in base units (usually cents)
	Value int64 `json:"value"`
}

// Counterparty The counterparty in a Transfer or Issuance transaction.
type Counterparty struct {
	Account string `json:"account"`

	// Node The node that holds the recipient account
	Node string `json:"node"`
}

// Error defines model for Error.
type Error struct {
	// Message High level error message
	Message string `json:"message"`

	// Payload Details about the error
	Payload string `json:"payload"`
}

// RedeemRequest Instructions to redeem tokens from an account
type RedeemRequest struct {
	// Amount The amount to issue, transfer or redeem.
	Amount Amount `json:"amount"`

	// Message optional message that will be visible to the auditor
	Message *string `json:"message,omitempty"`
}

// TransactionRecord A transaction
type TransactionRecord struct {
	// Amount The amount to issue, transfer or redeem.
	Amount Amount `json:"amount"`

	// Id transaction id
	Id string `json:"id"`

	// Message user provided message
	Message string `json:"message"`

	// Recipient the recipient of the transaction
	Recipient string `json:"recipient"`

	// Sender the sender of the transaction
	Sender string `json:"sender"`

	// Status Unknown | Pending | Confirmed | Deleted
	Status string `json:"status"`

	// Timestamp timestamp in the format: "2018-03-20T09:12:28Z"
	Timestamp time.Time `json:"timestamp"`
}

// TransferRequest Instructions to issue or transfer tokens to an account
type TransferRequest struct {
	// Amount The amount to issue, transfer or redeem.
	Amount Amount `json:"amount"`

	// Counterparty The counterparty in a Transfer or Issuance transaction.
	Counterparty Counterparty `json:"counterparty"`

	// Message optional message that will be sent and stored with the transfer transaction
	Message *string `json:"message,omitempty"`
}

// Code The token code to filter on
type Code = string

// Id account id as registered at the Certificate Authority
type Id = string

// AccountSuccess defines model for AccountSuccess.
type AccountSuccess struct {
	Message string `json:"message"`

	// Payload Information about an account and its balance
	Payload Account `json:"payload"`
}

// AccountsSuccess defines model for AccountsSuccess.
type AccountsSuccess struct {
	Message string    `json:"message"`
	Payload []Account `json:"payload"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = Error

// HealthSuccess defines model for HealthSuccess.
type HealthSuccess struct {
	// Message ok
	Message string `json:"message"`
}

// IssueSuccess defines model for IssueSuccess.
type IssueSuccess struct {
	Message string `json:"message"`

	// Payload Transaction id
	Payload string `json:"payload"`
}

// RedeemSuccess defines model for RedeemSuccess.
type RedeemSuccess struct {
	Message string `json:"message"`

	// Payload Transaction id
	Payload string `json:"payload"`
}

// TransactionsSuccess defines model for TransactionsSuccess.
type TransactionsSuccess struct {
	Message string              `json:"message"`
	Payload []TransactionRecord `json:"payload"`
}

// TransferSuccess defines model for TransferSuccess.
type TransferSuccess struct {
	Message string `json:"message"`

	// Payload Transaction id
	Payload string `json:"payload"`
}

// AuditorAccountParams defines parameters for AuditorAccount.
type AuditorAccountParams struct {
	Code *Code `form:"code,omitempty" json:"code,omitempty"`
}

// OwnerAccountParams defines parameters for OwnerAccount.
type OwnerAccountParams struct {
	Code *Code `form:"code,omitempty" json:"code,omitempty"`
}

// IssueJSONRequestBody defines body for Issue for application/json ContentType.
type IssueJSONRequestBody = TransferRequest

// RedeemJSONRequestBody defines body for Redeem for application/json ContentType.
type RedeemJSONRequestBody = RedeemRequest

// TransferJSONRequestBody defines body for Transfer for application/json ContentType.
type TransferJSONRequestBody = TransferRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get an account and their balance of a certain type
	// (GET /auditor/accounts/{id})
	AuditorAccount(ctx echo.Context, id Id, params AuditorAccountParams) error
	// Get all transactions for an account
	// (GET /auditor/accounts/{id}/transactions)
	AuditorTransactions(ctx echo.Context, id Id) error

	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Issue tokens to an account
	// (POST /issuer/issue)
	Issue(ctx echo.Context) error
	// Get all accounts on this node and their balances
	// (GET /owner/accounts)
	OwnerAccounts(ctx echo.Context) error
	// Get an account and their balances
	// (GET /owner/accounts/{id})
	OwnerAccount(ctx echo.Context, id Id, params OwnerAccountParams) error
	// Redeem (burn) tokens
	// (POST /owner/accounts/{id}/redeem)
	Redeem(ctx echo.Context, id Id) error
	// Get all transactions for an account
	// (GET /owner/accounts/{id}/transactions)
	OwnerTransactions(ctx echo.Context, id Id) error
	// Transfer tokens to another account
	// (POST /owner/accounts/{id}/transfer)
	Transfer(ctx echo.Context, id Id) error

	// (GET /readyz)
	Readyz(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuditorAccount converts echo context to params.
func (w *ServerInterfaceWrapper) AuditorAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AuditorAccountParams
	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuditorAccount(ctx, id, params)
	return err
}

// AuditorTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) AuditorTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuditorTransactions(ctx, id)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// Issue converts echo context to params.
func (w *ServerInterfaceWrapper) Issue(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Issue(ctx)
	return err
}

// OwnerAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) OwnerAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OwnerAccounts(ctx)
	return err
}

// OwnerAccount converts echo context to params.
func (w *ServerInterfaceWrapper) OwnerAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OwnerAccountParams
	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OwnerAccount(ctx, id, params)
	return err
}

// Redeem converts echo context to params.
func (w *ServerInterfaceWrapper) Redeem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Redeem(ctx, id)
	return err
}

// OwnerTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) OwnerTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OwnerTransactions(ctx, id)
	return err
}

// Transfer converts echo context to params.
func (w *ServerInterfaceWrapper) Transfer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Transfer(ctx, id)
	return err
}

// Readyz converts echo context to params.
func (w *ServerInterfaceWrapper) Readyz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Readyz(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auditor/accounts/:id", wrapper.AuditorAccount)
	router.GET(baseURL+"/auditor/accounts/:id/transactions", wrapper.AuditorTransactions)
	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.POST(baseURL+"/issuer/issue", wrapper.Issue)
	router.GET(baseURL+"/owner/accounts", wrapper.OwnerAccounts)
	router.GET(baseURL+"/owner/accounts/:id", wrapper.OwnerAccount)
	router.POST(baseURL+"/owner/accounts/:id/redeem", wrapper.Redeem)
	router.GET(baseURL+"/owner/accounts/:id/transactions", wrapper.OwnerTransactions)
	router.POST(baseURL+"/owner/accounts/:id/transfer", wrapper.Transfer)
	router.GET(baseURL+"/readyz", wrapper.Readyz)

}

type AccountSuccessJSONResponse struct {
	Message string `json:"message"`

	// Payload Information about an account and its balance
	Payload Account `json:"payload"`
}

type AccountsSuccessJSONResponse struct {
	Message string    `json:"message"`
	Payload []Account `json:"payload"`
}

type ErrorResponseJSONResponse Error

type HealthSuccessJSONResponse struct {
	// Message ok
	Message string `json:"message"`
}

type IssueSuccessJSONResponse struct {
	Message string `json:"message"`

	// Payload Transaction id
	Payload string `json:"payload"`
}

type RedeemSuccessJSONResponse struct {
	Message string `json:"message"`

	// Payload Transaction id
	Payload string `json:"payload"`
}

type TransactionsSuccessJSONResponse struct {
	Message string              `json:"message"`
	Payload []TransactionRecord `json:"payload"`
}

type TransferSuccessJSONResponse struct {
	Message string `json:"message"`

	// Payload Transaction id
	Payload string `json:"payload"`
}

type AuditorAccountRequestObject struct {
	Id     Id `json:"id"`
	Params AuditorAccountParams
}

type AuditorAccountResponseObject interface {
	VisitAuditorAccountResponse(w http.ResponseWriter) error
}

type AuditorAccount200JSONResponse struct{ AccountSuccessJSONResponse }

func (response AuditorAccount200JSONResponse) VisitAuditorAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuditorAccountdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response AuditorAccountdefaultJSONResponse) VisitAuditorAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuditorTransactionsRequestObject struct {
	Id Id `json:"id"`
}

type AuditorTransactionsResponseObject interface {
	VisitAuditorTransactionsResponse(w http.ResponseWriter) error
}

type AuditorTransactions200JSONResponse struct {
	TransactionsSuccessJSONResponse
}

func (response AuditorTransactions200JSONResponse) VisitAuditorTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuditorTransactionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response AuditorTransactionsdefaultJSONResponse) VisitAuditorTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthzRequestObject struct {
}

type HealthzResponseObject interface {
	VisitHealthzResponse(w http.ResponseWriter) error
}

type Healthz200JSONResponse struct{ HealthSuccessJSONResponse }

func (response Healthz200JSONResponse) VisitHealthzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Healthz503JSONResponse struct{ ErrorResponseJSONResponse }

func (response Healthz503JSONResponse) VisitHealthzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type IssueRequestObject struct {
	Body *IssueJSONRequestBody
}

type IssueResponseObject interface {
	VisitIssueResponse(w http.ResponseWriter) error
}

type Issue200JSONResponse struct{ IssueSuccessJSONResponse }

func (response Issue200JSONResponse) VisitIssueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IssuedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response IssuedefaultJSONResponse) VisitIssueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OwnerAccountsRequestObject struct {
}

type OwnerAccountsResponseObject interface {
	VisitOwnerAccountsResponse(w http.ResponseWriter) error
}

type OwnerAccounts200JSONResponse struct{ AccountsSuccessJSONResponse }

func (response OwnerAccounts200JSONResponse) VisitOwnerAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OwnerAccountsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response OwnerAccountsdefaultJSONResponse) VisitOwnerAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OwnerAccountRequestObject struct {
	Id     Id `json:"id"`
	Params OwnerAccountParams
}

type OwnerAccountResponseObject interface {
	VisitOwnerAccountResponse(w http.ResponseWriter) error
}

type OwnerAccount200JSONResponse struct{ AccountSuccessJSONResponse }

func (response OwnerAccount200JSONResponse) VisitOwnerAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OwnerAccountdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response OwnerAccountdefaultJSONResponse) VisitOwnerAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RedeemRequestObject struct {
	Id   Id `json:"id"`
	Body *RedeemJSONRequestBody
}

type RedeemResponseObject interface {
	VisitRedeemResponse(w http.ResponseWriter) error
}

type Redeem200JSONResponse struct{ RedeemSuccessJSONResponse }

func (response Redeem200JSONResponse) VisitRedeemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RedeemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RedeemdefaultJSONResponse) VisitRedeemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OwnerTransactionsRequestObject struct {
	Id Id `json:"id"`
}

type OwnerTransactionsResponseObject interface {
	VisitOwnerTransactionsResponse(w http.ResponseWriter) error
}

type OwnerTransactions200JSONResponse struct {
	TransactionsSuccessJSONResponse
}

func (response OwnerTransactions200JSONResponse) VisitOwnerTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OwnerTransactionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response OwnerTransactionsdefaultJSONResponse) VisitOwnerTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferRequestObject struct {
	Id   Id `json:"id"`
	Body *TransferJSONRequestBody
}

type TransferResponseObject interface {
	VisitTransferResponse(w http.ResponseWriter) error
}

type Transfer200JSONResponse struct{ TransferSuccessJSONResponse }

func (response Transfer200JSONResponse) VisitTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TransferdefaultJSONResponse) VisitTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadyzRequestObject struct {
}

type ReadyzResponseObject interface {
	VisitReadyzResponse(w http.ResponseWriter) error
}

type Readyz200JSONResponse struct{ HealthSuccessJSONResponse }

func (response Readyz200JSONResponse) VisitReadyzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Readyz503JSONResponse struct{ ErrorResponseJSONResponse }

func (response Readyz503JSONResponse) VisitReadyzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get an account and their balance of a certain type
	// (GET /auditor/accounts/{id})
	AuditorAccount(ctx context.Context, request AuditorAccountRequestObject) (AuditorAccountResponseObject, error)
	// Get all transactions for an account
	// (GET /auditor/accounts/{id}/transactions)
	AuditorTransactions(ctx context.Context, request AuditorTransactionsRequestObject) (AuditorTransactionsResponseObject, error)

	// (GET /healthz)
	Healthz(ctx context.Context, request HealthzRequestObject) (HealthzResponseObject, error)
	// Issue tokens to an account
	// (POST /issuer/issue)
	Issue(ctx context.Context, request IssueRequestObject) (IssueResponseObject, error)
	// Get all accounts on this node and their balances
	// (GET /owner/accounts)
	OwnerAccounts(ctx context.Context, request OwnerAccountsRequestObject) (OwnerAccountsResponseObject, error)
	// Get an account and their balances
	// (GET /owner/accounts/{id})
	OwnerAccount(ctx context.Context, request OwnerAccountRequestObject) (OwnerAccountResponseObject, error)
	// Redeem (burn) tokens
	// (POST /owner/accounts/{id}/redeem)
	Redeem(ctx context.Context, request RedeemRequestObject) (RedeemResponseObject, error)
	// Get all transactions for an account
	// (GET /owner/accounts/{id}/transactions)
	OwnerTransactions(ctx context.Context, request OwnerTransactionsRequestObject) (OwnerTransactionsResponseObject, error)
	// Transfer tokens to another account
	// (POST /owner/accounts/{id}/transfer)
	Transfer(ctx context.Context, request TransferRequestObject) (TransferResponseObject, error)

	// (GET /readyz)
	Readyz(ctx context.Context, request ReadyzRequestObject) (ReadyzResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AuditorAccount operation middleware
func (sh *strictHandler) AuditorAccount(ctx echo.Context, id Id, params AuditorAccountParams) error {
	var request AuditorAccountRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuditorAccount(ctx.Request().Context(), request.(AuditorAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuditorAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuditorAccountResponseObject); ok {
		return validResponse.VisitAuditorAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuditorTransactions operation middleware
func (sh *strictHandler) AuditorTransactions(ctx echo.Context, id Id) error {
	var request AuditorTransactionsRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuditorTransactions(ctx.Request().Context(), request.(AuditorTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuditorTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuditorTransactionsResponseObject); ok {
		return validResponse.VisitAuditorTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Healthz operation middleware
func (sh *strictHandler) Healthz(ctx echo.Context) error {
	var request HealthzRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Healthz(ctx.Request().Context(), request.(HealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Healthz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthzResponseObject); ok {
		return validResponse.VisitHealthzResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Issue operation middleware
func (sh *strictHandler) Issue(ctx echo.Context) error {
	var request IssueRequestObject

	var body IssueJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Issue(ctx.Request().Context(), request.(IssueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Issue")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IssueResponseObject); ok {
		return validResponse.VisitIssueResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// OwnerAccounts operation middleware
func (sh *strictHandler) OwnerAccounts(ctx echo.Context) error {
	var request OwnerAccountsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OwnerAccounts(ctx.Request().Context(), request.(OwnerAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OwnerAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OwnerAccountsResponseObject); ok {
		return validResponse.VisitOwnerAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// OwnerAccount operation middleware
func (sh *strictHandler) OwnerAccount(ctx echo.Context, id Id, params OwnerAccountParams) error {
	var request OwnerAccountRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OwnerAccount(ctx.Request().Context(), request.(OwnerAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OwnerAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OwnerAccountResponseObject); ok {
		return validResponse.VisitOwnerAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Redeem operation middleware
func (sh *strictHandler) Redeem(ctx echo.Context, id Id) error {
	var request RedeemRequestObject

	request.Id = id

	var body RedeemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Redeem(ctx.Request().Context(), request.(RedeemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Redeem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RedeemResponseObject); ok {
		return validResponse.VisitRedeemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// OwnerTransactions operation middleware
func (sh *strictHandler) OwnerTransactions(ctx echo.Context, id Id) error {
	var request OwnerTransactionsRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OwnerTransactions(ctx.Request().Context(), request.(OwnerTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OwnerTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OwnerTransactionsResponseObject); ok {
		return validResponse.VisitOwnerTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Transfer operation middleware
func (sh *strictHandler) Transfer(ctx echo.Context, id Id) error {
	var request TransferRequestObject

	request.Id = id

	var body TransferJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Transfer(ctx.Request().Context(), request.(TransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Transfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TransferResponseObject); ok {
		return validResponse.VisitTransferResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Readyz operation middleware
func (sh *strictHandler) Readyz(ctx echo.Context) error {
	var request ReadyzRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Readyz(ctx.Request().Context(), request.(ReadyzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Readyz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyzResponseObject); ok {
		return validResponse.VisitReadyzResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa33PbuBH+VzBoHy4zjEnJ9S+++ZKbJtOH3jjOTOdiP0DkysSZBBgAlKs6+t87C4C/",
	"REqmVSXTm/ZJFgECu9/ufvsB8jNNZFFKAcJoGj/TkilWgAFlvyUyBfzkgsb0awVqTQMqWAE0dmMB1UkG",
	"BcNJKehE8dJwibNvMyBGPoIgOJEYSZY8N6CIFDSg8E9WlDku88vnm3/QgJp1id+0UVw80M0moDxtdi6Z",
	"ydqNeUoDquBrxRWkNDaqgt1msCSRlTCEp4RpouCBawMKUsIMMRmQd6AMX/KEGSDXlcmk4mbdM5DlPIER",
	"CzdohC6l0GCxunY7faqSBLRHTxgQBv9kZZnjJlyK8HeNlj13TC6VLNEOt1ABWrMHi/vWngEt2TqXzCLz",
	"ZwVLGtM/hW0AQ7ekDr0t1BlZI/WlWbpd6L5xTC5+h8Q4x/oYepdI7S4a4nfQP8xdbqDQk/1uvGJKsfV3",
	"xOEXpaS6qR+8BoV9fthVx0ywAz0DPgDLTXZIGJoU78SAykeL+64I9a2Rj6OVO4b0ofh+1LqCH5ZkWxSm",
	"mNAswW/Eks40Vw9LKqkIDIJ7AylAcVT3W2Kz7Ixo4x4w4t9roGmXvUjm55CewxlEZ8uLFC5n7HJ+fjVb",
	"nJ8vZtH5VTo7iy7SK0iXp8nF4uIS2GzJri7Pzi4Azi4Wf/nOOHfh7XihvxfInS2IAqM4rF7EehLXdYy/",
	"gUSq9Aeynt17CWo6aKNkY/wy2I9dNnZsO0ImbYI/MCG0eDdudHXG0LqPYilVYWEnbCErQ5ggtf5hIiXc",
	"aLJgORNWz3QiUj+Mv9SSr5ZlK5ZXQONZFEXRJmhGP3963xmdR9Hm3gk2r5YGLaTZYdtoP0C4IAumgVQC",
	"rVwiG7IkI0mlFIgEFdk0AVCM9/9aTv4ocdhPBJsrNQTDHAioN3tURDM7hgKaYy8MSF01xDYLJO+Tfjh3",
	"hXAQlVrep7BkVW7ad/pWIBRWxMulhcWW6hiF+a22vbCPtyL8U6UrludrkmD83tCAuuRFfS/MOXaBggte",
	"VAWNo2YrLgw8gBoA7M8ibv8xgN8hhqBKpsx6HOakMwNtZeS2gzPKEJunHT7fQp3VddkkhXBxkE8C1GxY",
	"E6wt5AGSoonMtp3CnqYyZkgm81TbgChIeMkBy9yv+VJGCgdYPX0MMqdBd1G30ypDhovpK/TjB/6QkRxW",
	"kJPt9aaT8nswjOfaUx7CYdc6CjvXCuwGvlagRzlXG1X59m6kr0ffzMhSyaJDwnSQAU3ZT+O03ULc/sHy",
	"GkCXIE88z8kCyIprvsjtGRzhYVXKzQSAvHVjqAy1x8Ck626pbFVK4/YepkK+ns1PO05Te+z3mY6tQy5o",
	"QDWIFFSn6rRhptI0pu+kWHLllS0vQBtWlDSm82h2+TY6fTuPbqOreDaP55e/jVTnK2Mz1l/MC3phT0Qr",
	"DYqUSq54Cum+uugg8jzC2y011OTdi8pguRrOsbXc2NSFfBi2F/osHoV8EuQb+RVEysUD+UaaSJFv5D3k",
	"YMYVcieIA/PqIaRutM51k5jcjYb7jnYbTsoMvMUVpjVyD1EX+qBOl66RDQbBnlNwq6Unc4yVAdiUGiHg",
	"6cbIY5JNstUy973Va6+HE5UGr1S1kSjDnrjJ2lyznu5LuoEo6BgV7KYze9kolnIEeSe4sNF2ZBca2OP5",
	"E/IzSx4hJYs1YSTlaM+iMpCSHNIHUMGdKBVoUCtM91LxFUvWpNL47TdQkvxNyCc7lfyqpFzqkztxJ947",
	"UUZKqVAvpdgmZVmAMG/iO3FXRdFpUuX2E+4EIe5Jzt2TqyiKyLVjejcS1kMjk2dRZCUOTJg7jyLyd5Q0",
	"ZPaayfPBZP+g9sHWjrGq+rY+C65AaReK2UmEiSVLEKzkNKanJ9HJqW3eJrP5Hfq+FvoC0OEzTzc48gA2",
	"7bEY7OnoI8oUj811Wy2dm+8v4+neTgk5HrdfnGX7G56NejfF8yjaVVDNvHDrOtkeE71Kf+nV/p2kPT5W",
	"RcHUmsb0rzA4FpoMuKoPhsjujCSgDEMmxUoJqGEP2ioCrxzucc1xvMPuhcdL4HfvXw6KwEHIjt36HBXe",
	"PCe9ax88zfaIeRzPzN7k/msnaB/8+CE+92+JNwE9i04P8bS2vLFM0/seADdgKiU0wcLnTihY4sMjvibO",
	"RdsiQtvGlPuw9zNSjzhtWcn/3gPa/CzT9dFu2bc778hlzHjvXVYiHbbb/k9Sm0PC1LvtPlZO2kV3aYQ6",
	"oC4aW8Hc8yZG0B5sm/LfmbeW/+vfi+h/wIXfrVprF4hE8ci1O2QPuFF38LK++8Lt47C/7XTB+H/TeT2w",
	"oVNeuwnDHdgP7ybHp5n+FcKmL1MPpor+T0PHipRblfy0qJR4097JbwfnxVd2RW+SOrA18r+uDV6qg/o4",
	"srsS6vb231QLoy33CNWw/YPUsWJ2O3bElibDY+DOkL1yAYywApaud0u/Gzf8B1Z+1kHrfZJAaUjC8lw7",
	"sEGt6sSsVE5jmhlTxmGYy4TlmdQmxsNsyEoermah7YC75s0mzptPnHfanXffgDC46/TFzFaM58xftbbX",
	"rP7/luoHuOGE970ia//tyX2f+LbNRfLE8hys6PKLuBQdrvHJR8oJdH/FwVIuMGnat9vYb+43/w4AAP//",
	"tZbdazsmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
